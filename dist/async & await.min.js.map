{"version":3,"sources":["async & await.js"],"names":["getFile","myPromise","regeneratorRuntime","async","_context","prev","next","req","open","Promise","resolve","reject","XMLHttpRequest","onload","response","onerror","send","awrap","document","getElementById","innerHTML","sent","t0","stop"],"mappings":"aA2GI,SAAAA,UAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACAC,EAAIC,IAAKC,QAAO,SAAAC,EAAhBC,GADA,IAAIJ,EAAM,IAAIK,eAEdL,EAAAA,KAAAA,MAAIM,cACFN,EAAAM,OAAA,WACUN,KAARG,EAAAA,OACDA,EAFDH,EAAAO,UAICH,EAAA,mBAEHJ,EAAAA,QAAIQ,WACFJ,EAAAA,kBAEFJ,EAAIS,SAZJZ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAe,MAFJhB,GAEI,KAAA,EAFJiB,SAAAC,eAAA,QAAAC,UAEIhB,EAAAiB,KAAAjB,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAkBAc,SAASC,eAAe,QAAQC,UAAhChB,EAAAkB,GAlBA,KAAA,GAAA,IAAA,MAAA,OAAAlB,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAFJvB","file":"async & await.min.js","sourcesContent":["// THIS IS ONLY A PRACTICE REPO. Use /* */ when practicing different techniques. \r\n\r\n/*\r\nfunction myDisplayer(something) {\r\n  document.getElementById('demo').innerHTML = something;\r\n}\r\n\r\nasync function myFunction() {\r\n  return 'Hello Engr. Jian Jayne Osea Mu単oz'\r\n}\r\n\r\nmyFunction()\r\n  .then((message) => {\r\n    myDisplayer(message); // it can also be a console.log()\r\n  })\r\n  .catch((error) => {\r\n    MyDisplayer(error); // it can also be a console.log()\r\n  });\r\n*/\r\n\r\n\r\n\r\n// S I M P L E R\r\n\r\n/*\r\nfunction myDisplayer(something) {\r\n  document.getElementById('demo').innerHTML = something;\r\n}\r\n\r\nasync function myFunction() {\r\n  return 'Hello, Engr. Jian Jayne Osea Mu単oz!'\r\n}\r\n\r\nmyFunction()\r\n  .then((message) => {\r\n    myDisplayer(message);\r\n  }); \r\n*/\r\n\r\n\r\n\r\n// B A S I C   S Y N T A X  with 2 arguments, reject also declared but not defined,\r\n/*\r\nasync function myDisplay() {\r\n  let myPromise = new Promise((resolve, reject) => {\r\n    resolve('Hello, Engr. Jian Jayne Osea Mu単oz!');\r\n  })\r\n  document.getElementById('demo').innerHTML = await myPromise;\r\n}\r\n\r\nmyDisplay(); \r\n*/\r\n\r\n\r\n// E X A M P L E   without   R E J E C T\r\n/*\r\nasync function myDisplay() {\r\n  let myPromise = new Promise((resolve) => {\r\n    resolve('Hello, Engr. Jian Jayne Osea Mu単oz!');\r\n  })\r\n  document.getElementById('demo').innerHTML = await myPromise;\r\n}\r\n\r\nmyDisplay();\r\n*/\r\n\r\n\r\n// W A I T I N G   F O R   A   T I M E O U T\r\n/*\r\nasync function myDisplay() {\r\n  let myPromise = new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve('Waiting for a Timeout');\r\n    }, 3000);\r\n  })\r\n  document.getElementBy('demo').innerHTML = await myPromise;\r\n}\r\n\r\nmyDisplay();\r\n*/\r\n\r\n// N O T   A D V I S A B L E\r\n/*\r\nasync function getFile() {\r\n  let myPromise = new Promise((resolve, reject) => {\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', 'index.html');\r\n    req.onload = () => {\r\n      if (req.status == 200) {\r\n        resolve(req.response);\r\n      } else {\r\n        reject('File not Found');\r\n      }\r\n    };\r\n    req.send();\r\n  });\r\n  document.getElementById('demo').innerHTML = await myPromise;\r\n}\r\n\r\ngetFile();\r\n*/\r\n\r\n\r\n// W A I T I N G   F O R   A   F I L E\r\n// C O M P L E T E   A N D   I M P R O V E D\r\nasync function getFile() {\r\n  let myPromise = new Promise((resolve, reject) => {\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', 'index.html');\r\n    req.onload = () => {\r\n      if (req.status == 200) {\r\n        resolve(req.response);\r\n      } else {\r\n        reject('File not found');\r\n      }\r\n    };\r\n    req.onerror = () => {\r\n      reject('Network error');\r\n    };\r\n    req.send();\r\n  });\r\n\r\n  try {\r\n    document.getElementById('demo').innerHTML = await myPromise;\r\n  } catch (error) {\r\n    document.getElementById('demo').innerHTML = error;\r\n  }\r\n}\r\n\r\ngetFile();"]}